# Makefile for Sphinx documentation
# Auto-generated by OMS

# You can set these variables from the command line.
SPHINXOPTS    =
SPHINXBUILD   = sphinx-build
PAPER         =
BUILDDIR      = {{ build_path }}
PYTHON        = python

# Internal variables.
PAPEROPT_a4     = -D latex_paper_size=a4
PAPEROPT_letter = -D latex_paper_size=letter
ALLSPHINXOPTS   = -d $(BUILDDIR)/doctrees $(PAPEROPT_$(PAPER)) $(SPHINXOPTS)
# the i18n builder cannot share the environment and doctrees with the others
I18NSPHINXOPTS  = $(PAPEROPT_$(PAPER)) $(SPHINXOPTS)

# where to find each of the projects..
{%- for project in doc_projects %}
PROJECT_PATH-{{ project}} = ../{{ project }}/docs
{%- endfor %}

help:
	@echo "Please use 'make <target>', where <target> is one of the following:"
	@echo
	@echo "  clean      to run an rm -rf on everything in the build directory"
	@echo "  oms-docs   to build the local project, oms-docs, rendered as HTML."
	@echo "  all        to build the all doc projects, rendered as HTML."
	@echo "  serve      to serve the docs to your browser via \`http://0.0.0.0:9000\`,"
	@echo "             using node.js and grunt to watch for changes and auto-reload."
	@echo "  serve-all  to serve the HTML build, using grunt to watch all doc projects,"
	@echo "             (not just oms-docs) for changes."
	@echo "  dirhtml    to make HTML files named index.html in directories"
	@echo "  singlehtml to make a single large HTML file"
	@echo "  json       to make JSON files"
	@echo "  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter"
	@echo "  latexpdf   to make LaTeX files and run them through pdflatex"
	@echo "  text       to make text files"
	@echo "  man        to make manual pages"
	@echo "  changes    to make an overview of all changed/added/deprecated items"
	@echo "  linkcheck  to check all external links for integrity"
	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"
	@echo
	@echo
	@echo "Note that, for each of the following repositories:"
	@echo
	{% for project in doc_projects -%}
	@echo "  {{ project }}"
	{% endfor -%}
	@echo
	@echo "..each of the following targets are available:"
	@echo
	@echo "  html       to make standalone HTML files"
	@echo "  singlehtml to make a single large HTML file"
	@echo "  json       to make JSON files"
	@echo "  text       to make text files"
	@echo "  man        to make manual pages"
	@echo "  changes    to make an overview of all changed/added/deprecated items"
	@echo "  linkcheck  to check all external links for integrity"
	@echo "  doctest    to run all doctests embedded in the documentation (if enabled)"
	@echo
	@echo
	@echo "These are available in the form: make <project>-<target>"
	@echo
	@echo "For example: make oms-core-html"
	@echo "             make oms-deploy-doctest"
	@echo "and so on..."
	@echo
	@echo
	@echo "In addition, the target 'all_docs-html' will run the HTML build for"
	@echo "the sphinx documentation projects listed when creating this Makefile."
	@echo
	@echo "(the list of projects to be built is as noted above)"
	@echo
	@echo
	@echo "The variables in this Makefile are set as follows:"
	@echo
	@echo "  PYTHON:        $(PYTHON)"
	@echo "  BUILDDIR:      $(BUILDDIR)"
	@echo "  SPHINXOPTS:    $(SPHINXOPTS)"
	@echo "  SPHINXBUILD:   $(SPHINXBUILD)"
	@echo "  ALLSPHINXOPTS: $(ALLSPHINXOPTS)"
	@echo
	@echo
	@echo "In general, you will want to either:"
	@echo
	@echo "  a) build/host oms-docs, eg: 'make oms-docs serve'"
	@echo "  b) build/host all doc projects, eg: 'make all serve-all'"
	@echo "  c) you want to clean first, eg: 'make clean all serve-all'"
	@echo "  d) build something specific, eg: 'make oms-deploy-linkcheck'"
	@echo


clean:
	rm -rf $(BUILDDIR)/*

oms-docs:
	@echo "Attempting to build the sphinx documentation project in oms-docs.."
	$(SPHINXBUILD) -b dirhtml $(ALLSPHINXOPTS) sources $(BUILDDIR)/html
	@echo
	@echo "Build finished. The documentation pages are now in $(BUILDDIR)/html."

singlehtml:
	$(SPHINXBUILD) -b singlehtml $(ALLSPHINXOPTS) sources $(BUILDDIR)/singlehtml
	@echo "Build finished. The HTML page is in $(BUILDDIR)/singlehtml."

json:
	$(SPHINXBUILD) -b json $(ALLSPHINXOPTS) sources $(BUILDDIR)/json
	@echo "Build finished; now you can process the JSON files."

latex:
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) sources $(BUILDDIR)/latex
	@echo "Build finished; the LaTeX files are in $(BUILDDIR)/latex."
	@echo "Run \`make' in that directory to run these through (pdf)latex" \
	      "(use \`make latexpdf' here to do that automatically)."

latexpdf:
	$(SPHINXBUILD) -b latex $(ALLSPHINXOPTS) sources $(BUILDDIR)/latex
	@echo "Running LaTeX files through pdflatex..."
	$(MAKE) -C $(BUILDDIR)/latex all-pdf
	@echo "pdflatex finished; the PDF files are in $(BUILDDIR)/latex."

text:
	$(SPHINXBUILD) -b text $(ALLSPHINXOPTS) sources $(BUILDDIR)/text
	@echo "Build finished. The text files are in $(BUILDDIR)/text."

man:
	$(SPHINXBUILD) -b man $(ALLSPHINXOPTS) sources $(BUILDDIR)/man
	@echo "Build finished. The manual pages are in $(BUILDDIR)/man."

changes:
	$(SPHINXBUILD) -b changes $(ALLSPHINXOPTS) sources $(BUILDDIR)/changes
	@echo "The overview file is in $(BUILDDIR)/changes."

linkcheck:
	$(SPHINXBUILD) -b linkcheck $(ALLSPHINXOPTS) sources $(BUILDDIR)/linkcheck
	@echo "Link check complete; look for any errors in the above output " \
	      "or in $(BUILDDIR)/linkcheck/output.txt."

doctest:
	$(SPHINXBUILD) -b doctest $(ALLSPHINXOPTS) sources $(BUILDDIR)/doctest
	@echo "Testing of doctests in the sources finished, look at the " \
	      "results in $(BUILDDIR)/doctest/output.txt."

{%- for p in doc_projects %}
	{%- for t in target_list %}
{{ p }}-{{ t }}:
	@echo "Attempting to build the sphinx docs in $(PROJECT_PATH-{{ p }})"
	$(SPHINXBUILD) -b {{ t }} $(ALLSPHINXOPTS) $(PROJECT_PATH-{{ p }}) $(BUILDDIR)/{{ t }}/{{ p }}
	@echo
	@echo "Build finished. The {{ t }} build artifacts are in $(BUILDDIR)/{{ t }}/{{ p }}."
	{%- endfor %}

clean-{{ p }}:
	rm -rf $(BUILDDIR)/{{ p }}/*
{%- endfor %}

all:
	@make oms-docs
{%- for p in doc_projects %}
	@make {{ p }}-html
{%- endfor %}

serve:
	@grunt --gruntfile Gruntfile.js serve_oms_docs

serve-all:
	@grunt --gruntfile Gruntfile-all.js serve_all_docs

